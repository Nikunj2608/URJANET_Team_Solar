{
  "timestamp": "20251004_151258",
  "config": {
    "model_path": "models/ppo_improved_20251004_111610/best_model.pt",
    "data_path": "data/synthetic_10year/COMPLETE_10YEAR_DATA.csv",
    "test_episodes": 10
  },
  "summary": {
    "total": 16,
    "passed": 12,
    "failed": 4,
    "warned": 0,
    "success_rate": 75.0
  },
  "results": [
    {
      "test": "Model File Exists",
      "status": "PASS",
      "details": "models/ppo_improved_20251004_111610/best_model.pt"
    },
    {
      "test": "Model Loads",
      "status": "FAIL",
      "details": "Error: Weights only load failed. This file can still be loaded, to do so you have two options, \u001b[1mdo those steps only if you trust the source of the checkpoint\u001b[0m. \n\t(1) In PyTorch 2.6, we changed the default value of the `weights_only` argument in `torch.load` from `False` to `True`. Re-running `torch.load` with `weights_only` set to `False` will likely succeed, but it can result in arbitrary code execution. Do it only if you got the file from a trusted source.\n\t(2) Alternatively, to load with `weights_only=True` please check the recommended steps in the following error message.\n\tWeightsUnpickler error: Unsupported global: GLOBAL numpy.core.multiarray._reconstruct was not an allowed global by default. Please use `torch.serialization.add_safe_globals([numpy.core.multiarray._reconstruct])` or the `torch.serialization.safe_globals([numpy.core.multiarray._reconstruct])` context manager to allowlist this global if you trust this class/function.\n\nCheck the documentation of torch.load to learn more about types accepted by default with weights_only https://pytorch.org/docs/stable/generated/torch.load.html."
    },
    {
      "test": "Model Architecture",
      "status": "FAIL",
      "details": "Agent not loaded"
    },
    {
      "test": "Data File Exists",
      "status": "PASS",
      "details": "data/synthetic_10year/COMPLETE_10YEAR_DATA.csv"
    },
    {
      "test": "Data Loads",
      "status": "PASS",
      "details": "Loaded 350688 rows, 11 columns"
    },
    {
      "test": "Data Columns",
      "status": "FAIL",
      "details": "Missing columns: ['timestamp', 'pv_power', 'wind_power', 'load_power', 'price']"
    },
    {
      "test": "Environment Creation",
      "status": "FAIL",
      "details": "Error: \"None of [Index(['timestamp', 'pv_power'], dtype='object')] are in the [columns]\""
    },
    {
      "test": "File: models/ppo_improved_20251004_111610/best_model.pt",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "File: microgrid_env.py",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "File: safety_supervisor.py",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "File: env_config.py",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "File: train_ppo_improved.py",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "Doc: README.md",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "Doc: FRONTEND_DESIGN_GUIDE.md",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "Doc: REALTIME_DEPLOYMENT_GUIDE.md",
      "status": "PASS",
      "details": "Exists"
    },
    {
      "test": "Config Validity",
      "status": "PASS",
      "details": "All critical parameters present"
    }
  ],
  "performance": {}
}